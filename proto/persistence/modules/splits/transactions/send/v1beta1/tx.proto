syntax ="proto3";

package persistence.modules.splits.transactions.send.v1beta1;

import "third_party/proto/gogoproto/gogo.proto";

option go_package = "modules/splits/internal/transactions/send";

service Msg {
  rpc TransactService(message) returns (messageResponse) {};
}

message message {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.equal)           = false;

  string from =1 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.AccAddress", (gogoproto.nullable) = false] ;
  string fromID =2 [(gogoproto.customtype) = "github.com/persistenceOne/persistenceSDK/schema/types.ID", (gogoproto.nullable) = false] ;
  string toID = 3 [(gogoproto.customtype) = "github.com/persistenceOne/persistenceSDK/schema/types.ID", (gogoproto.nullable) = false] ;
  string ownableID =4 [(gogoproto.customtype) = "github.com/persistenceOne/persistenceSDK/schema/types.ID", (gogoproto.nullable) = false];
  string value = 5 [(gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec", (gogoproto.nullable) = false];
}

message messageResponse {}
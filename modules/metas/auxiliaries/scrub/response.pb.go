// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/persistence/modules/metas/auxiliaries/scrub/v1beta1/response.proto

package scrub

import (
	"errors"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_persistenceOne_persistenceSDK_schema_types "github.com/persistenceOne/persistenceSDK/schema/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type auxiliaryResponse struct {
	Success    bool                                                             `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error      error                                                            `protobuf:"bytes,2,opt,name=error,proto3,customtype=error" json:"error"`
	Properties github_com_persistenceOne_persistenceSDK_schema_types.Properties `protobuf:"bytes,3,opt,name=properties,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.Properties" json:"properties"`
}

func (m *auxiliaryResponse) Reset()         { *m = auxiliaryResponse{} }
func (m *auxiliaryResponse) String() string { return proto.CompactTextString(m) }
func (*auxiliaryResponse) ProtoMessage()    {}
func (*auxiliaryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d38a3e5e4af85068, []int{0}
}
func (m *auxiliaryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *auxiliaryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuxiliaryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *auxiliaryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuxiliaryResponse.Merge(m, src)
}
func (m *auxiliaryResponse) XXX_Size() int {
	return m.Size()
}
func (m *auxiliaryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AuxiliaryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AuxiliaryResponse proto.InternalMessageInfo

func (m *auxiliaryResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*auxiliaryResponse)(nil), "persistence.modules.metas.auxiliaries.scrub.v1beta1.auxiliaryResponse")
}

func init() {
	proto.RegisterFile("proto/persistence/modules/metas/auxiliaries/scrub/v1beta1/response.proto", fileDescriptor_d38a3e5e4af85068)
}

var fileDescriptor_d38a3e5e4af85068 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd0, 0x3f, 0x4b, 0x3b, 0x31,
	0x18, 0x07, 0xf0, 0xcb, 0xef, 0xe7, 0xdf, 0x80, 0x83, 0x37, 0x1d, 0x0e, 0xb9, 0xa2, 0x20, 0x9d,
	0x12, 0xaa, 0x93, 0x4e, 0x52, 0x04, 0x05, 0x07, 0xe5, 0xdc, 0x5c, 0x24, 0x97, 0x3e, 0xf4, 0x02,
	0xbd, 0x26, 0x3c, 0x4f, 0x4e, 0xec, 0xbb, 0xf0, 0x25, 0xf8, 0x5a, 0x9c, 0x3a, 0x76, 0x14, 0x87,
	0x22, 0xed, 0xe2, 0xcb, 0x10, 0xee, 0x5a, 0xbd, 0xc5, 0x29, 0x79, 0xc2, 0x97, 0x4f, 0x1e, 0xbe,
	0xfc, 0xca, 0xa3, 0x0b, 0x4e, 0x79, 0x40, 0xb2, 0x14, 0x60, 0x6c, 0x40, 0x69, 0x22, 0x08, 0xa4,
	0x4a, 0x08, 0x9a, 0x94, 0xae, 0x9e, 0xed, 0xc8, 0x6a, 0xb4, 0x40, 0x8a, 0x0c, 0x56, 0xb9, 0x7a,
	0xea, 0xe5, 0x10, 0x74, 0x4f, 0x21, 0x90, 0x77, 0x63, 0x02, 0x59, 0x0b, 0xf1, 0x49, 0x8b, 0x90,
	0x0d, 0x21, 0x6b, 0x42, 0xb6, 0x08, 0x59, 0x13, 0x72, 0x45, 0x1c, 0x1c, 0x87, 0xc2, 0xe2, 0xe0,
	0xd1, 0x6b, 0x0c, 0x13, 0xd5, 0x2c, 0x32, 0x74, 0x43, 0xf7, 0x7b, 0x6b, 0xec, 0xc3, 0x37, 0xc6,
	0xf7, 0xd7, 0xca, 0x24, 0x5b, 0xfd, 0x1b, 0x27, 0x7c, 0x9b, 0x2a, 0x63, 0x80, 0x28, 0x61, 0x1d,
	0xd6, 0xdd, 0xc9, 0xd6, 0x63, 0x7c, 0xc4, 0x37, 0x01, 0xd1, 0x61, 0xf2, 0xaf, 0xc3, 0xba, 0xbb,
	0xfd, 0xbd, 0xe9, 0x3c, 0x8d, 0x3e, 0xe6, 0x69, 0xf3, 0x98, 0x35, 0x47, 0x5c, 0x70, 0xee, 0xd1,
	0x79, 0xc0, 0x60, 0x81, 0x92, 0xff, 0x75, 0xf2, 0x7a, 0x95, 0xbc, 0x18, 0xda, 0x50, 0x54, 0xb9,
	0x34, 0xae, 0x6c, 0x57, 0x73, 0x3b, 0x86, 0xf6, 0x78, 0x7f, 0x79, 0xa3, 0xc8, 0x14, 0x50, 0x6a,
	0x15, 0x26, 0x1e, 0x48, 0xde, 0xfd, 0x78, 0x59, 0xcb, 0x3e, 0xdf, 0xf8, 0x7a, 0x4d, 0xa3, 0xfe,
	0xd9, 0x74, 0x21, 0xd8, 0x6c, 0x21, 0xd8, 0xe7, 0x42, 0xb0, 0x97, 0xa5, 0x88, 0x66, 0x4b, 0x11,
	0xbd, 0x2f, 0x45, 0xf4, 0x90, 0x96, 0x6e, 0x50, 0x8d, 0xe0, 0xcf, 0xca, 0xf3, 0xad, 0xba, 0x86,
	0xd3, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xdc, 0x72, 0x25, 0xad, 0x01, 0x00, 0x00,
}

func (m *auxiliaryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *auxiliaryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *auxiliaryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Properties.Size() > 0 {
		i -= m.Properties.Size()
		if _, err := m.Properties.MarshalTo(dAtA[i:]); err != nil {
			return 0, nil
		}
		i = encodeVarintResponse(dAtA, i, uint64(m.Properties.Size()))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Error.Error()) > 0 {
		i -= len(m.Error.Error())
		copy(dAtA[i:], m.Error.Error())
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Error.Error())))
		i--
		dAtA[i] = 0x12
	}
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *auxiliaryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	l = len(m.Error.Error())
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	l = m.Properties.Size()
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	return n
}

func sovResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResponse(x uint64) (n int) {
	return sovResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *auxiliaryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auxiliaryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auxiliaryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = error(errors.New(string(dAtA[iNdEx:postIndex])))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Properties.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResponse = fmt.Errorf("proto: unexpected end of group")
)

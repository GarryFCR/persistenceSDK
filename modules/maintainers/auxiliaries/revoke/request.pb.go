// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/persistence/modules/maintainers/auxiliaries/revoke/v1beta1/request.proto

package revoke

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_persistenceOne_persistenceSDK_schema_types "github.com/persistenceOne/persistenceSDK/schema/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type auxiliaryRequest struct {
	FromID           github_com_persistenceOne_persistenceSDK_schema_types.ID `protobuf:"bytes,1,opt,name=fromID,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"fromID" valid:"required~required field fromID missing"`
	ToID             github_com_persistenceOne_persistenceSDK_schema_types.ID `protobuf:"bytes,2,opt,name=ToID,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"ToID" valid:"required~required field toID missing"`
	ClassificationID github_com_persistenceOne_persistenceSDK_schema_types.ID `protobuf:"bytes,3,opt,name=ClassificationID,proto3,customtype=github.com/persistenceOne/persistenceSDK/schema/types.ID" json:"ClassificationID" valid:"required~required field classificationID missing"`
}

func (m *auxiliaryRequest) Reset()         { *m = auxiliaryRequest{} }
func (m *auxiliaryRequest) String() string { return proto.CompactTextString(m) }
func (*auxiliaryRequest) ProtoMessage()    {}
func (*auxiliaryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b15ba8bd63bfc50e, []int{0}
}
func (m *auxiliaryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *auxiliaryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuxiliaryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *auxiliaryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuxiliaryRequest.Merge(m, src)
}
func (m *auxiliaryRequest) XXX_Size() int {
	return m.Size()
}
func (m *auxiliaryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AuxiliaryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AuxiliaryRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*auxiliaryRequest)(nil), "persistence.modules.maintainers.auxiliaries.revoke.v1beta1.auxiliaryRequest")
}

func init() {
	proto.RegisterFile("proto/persistence/modules/maintainers/auxiliaries/revoke/v1beta1/request.proto", fileDescriptor_b15ba8bd63bfc50e)
}

var fileDescriptor_b15ba8bd63bfc50e = []byte{
	// 315 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0xd1, 0xb1, 0x4a, 0xf3, 0x50,
	0x14, 0x07, 0xf0, 0x9b, 0x7e, 0x1f, 0x45, 0x33, 0x95, 0x4c, 0xc5, 0xe1, 0x46, 0x1c, 0x8a, 0xd3,
	0xbd, 0x14, 0x17, 0x75, 0x2a, 0x35, 0x4b, 0x10, 0x11, 0x6a, 0x07, 0x71, 0x91, 0xdb, 0xf4, 0xb4,
	0xb9, 0x98, 0xe4, 0xc6, 0x7b, 0x6e, 0x8a, 0x79, 0x03, 0x47, 0x1f, 0xa1, 0xcf, 0xe1, 0x13, 0x74,
	0xec, 0x28, 0x0e, 0x45, 0x92, 0xc5, 0xc7, 0x10, 0x92, 0x8a, 0x01, 0x07, 0x97, 0x6e, 0xe7, 0x2c,
	0xbf, 0xff, 0x39, 0xfc, 0xed, 0xab, 0x54, 0x2b, 0xa3, 0x78, 0x0a, 0x1a, 0x25, 0x1a, 0x48, 0x02,
	0xe0, 0x02, 0x11, 0x0c, 0xf2, 0x58, 0xc8, 0xc4, 0x08, 0x99, 0x80, 0x46, 0x2e, 0xb2, 0x27, 0x19,
	0x49, 0xa1, 0x25, 0x20, 0xd7, 0xb0, 0x50, 0x0f, 0xc0, 0x17, 0xfd, 0x09, 0x18, 0xd1, 0xe7, 0x1a,
	0x1e, 0x33, 0x40, 0xc3, 0x2a, 0xc7, 0x39, 0x6b, 0x40, 0xac, 0x86, 0x58, 0x03, 0x62, 0x0d, 0x88,
	0xd5, 0x10, 0xdb, 0x42, 0x07, 0x3d, 0x13, 0x4a, 0x3d, 0xbd, 0x4f, 0x85, 0x36, 0x39, 0xaf, 0xaf,
	0x9a, 0xab, 0xb9, 0xfa, 0x99, 0xea, 0x88, 0xa3, 0xd7, 0x96, 0xdd, 0xf9, 0x66, 0xf2, 0x51, 0x9d,
	0xee, 0xdc, 0xda, 0xed, 0x99, 0x56, 0xb1, 0xef, 0x75, 0xad, 0x43, 0xeb, 0x78, 0x7f, 0x38, 0x58,
	0x6d, 0x5c, 0xf2, 0xbe, 0x71, 0x4f, 0xe7, 0xd2, 0x84, 0xd9, 0x84, 0x05, 0x2a, 0x6e, 0xfe, 0x78,
	0x9d, 0x40, 0x73, 0xbd, 0xf1, 0x2e, 0x39, 0x06, 0x21, 0xc4, 0x82, 0x9b, 0x3c, 0x05, 0x64, 0xbe,
	0x37, 0xda, 0x7a, 0xce, 0xd8, 0xfe, 0x3f, 0x56, 0xbe, 0xd7, 0x6d, 0xed, 0xc8, 0xad, 0x34, 0x27,
	0xb2, 0x3b, 0x17, 0x91, 0x40, 0x94, 0x33, 0x19, 0x08, 0x23, 0x55, 0xe2, 0x7b, 0xdd, 0x7f, 0x3b,
	0x4a, 0xf8, 0x25, 0x9f, 0xef, 0x3d, 0x2f, 0x5d, 0xf2, 0xb9, 0x74, 0xc9, 0x70, 0xb0, 0x2a, 0xa8,
	0xb5, 0x2e, 0xa8, 0xf5, 0x51, 0x50, 0xeb, 0xa5, 0xa4, 0x64, 0x5d, 0x52, 0xf2, 0x56, 0x52, 0x72,
	0xd7, 0x8b, 0xd5, 0x34, 0x8b, 0xe0, 0xaf, 0xde, 0x27, 0xed, 0xaa, 0x85, 0x93, 0xaf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x2a, 0xe4, 0x23, 0xb3, 0x39, 0x02, 0x00, 0x00,
}

func (m *auxiliaryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *auxiliaryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *auxiliaryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClassificationID.Size() > 0 {
		i -= m.ClassificationID.Size()
		if _, err := m.ClassificationID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRequest(dAtA, i, uint64(m.ClassificationID.Size()))
		i--
		dAtA[i] = 0x1a
	}
	if m.ToID.Size() > 0 {
		i -= m.ToID.Size()
		if _, err := m.ToID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRequest(dAtA, i, uint64(m.ToID.Size()))
		i--
		dAtA[i] = 0x12
	}
	if m.FromID.Size() > 0 {
		i -= m.FromID.Size()
		if _, err := m.FromID.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintRequest(dAtA, i, uint64(m.FromID.Size()))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRequest(dAtA []byte, offset int, v uint64) int {
	offset -= sovRequest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *auxiliaryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FromID.Size()
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = m.ToID.Size()
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	l = m.ClassificationID.Size()
	if l > 0 {
		n += 1 + l + sovRequest(uint64(l))
	}
	return n
}

func sovRequest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRequest(x uint64) (n int) {
	return sovRequest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *auxiliaryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: auxiliaryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: auxiliaryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ToID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClassificationID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRequest
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRequest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ClassificationID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRequest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRequest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRequest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRequest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRequest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRequest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRequest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRequest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRequest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRequest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRequest = fmt.Errorf("proto: unexpected end of group")
)
